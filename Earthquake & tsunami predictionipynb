{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/Surabhi-Sunil/SurabhiSunil/blob/master/Earthquake%20%26%20tsunami%20predictionipynb\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 1,
      "metadata": {
        "id": "x7zCp-hmCw5K"
      },
      "outputs": [],
      "source": [
        "import numpy as np\n",
        "import pandas as pd\n",
        "import os\n",
        "import seaborn as sns\n",
        "import matplotlib.pyplot as plt\n",
        "%matplotlib inline\n",
        "import matplotlib.pyplot as plt"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df = pd.read_csv('/content/earthquake_1995-2023.csv')"
      ],
      "metadata": {
        "id": "IfPoinCGDFEn"
      },
      "execution_count": 2,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "df.info()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "2VbVvloUDt1g",
        "outputId": "a3eab91d-a07b-4f7d-b8f1-6cdce0b6c85c"
      },
      "execution_count": 3,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "<class 'pandas.core.frame.DataFrame'>\n",
            "RangeIndex: 1000 entries, 0 to 999\n",
            "Data columns (total 19 columns):\n",
            " #   Column     Non-Null Count  Dtype  \n",
            "---  ------     --------------  -----  \n",
            " 0   title      1000 non-null   object \n",
            " 1   magnitude  1000 non-null   float64\n",
            " 2   date_time  1000 non-null   object \n",
            " 3   cdi        1000 non-null   int64  \n",
            " 4   mmi        1000 non-null   int64  \n",
            " 5   alert      449 non-null    object \n",
            " 6   tsunami    1000 non-null   int64  \n",
            " 7   sig        1000 non-null   int64  \n",
            " 8   net        1000 non-null   object \n",
            " 9   nst        1000 non-null   int64  \n",
            " 10  dmin       1000 non-null   float64\n",
            " 11  gap        1000 non-null   float64\n",
            " 12  magType    1000 non-null   object \n",
            " 13  depth      1000 non-null   float64\n",
            " 14  latitude   1000 non-null   float64\n",
            " 15  longitude  1000 non-null   float64\n",
            " 16  location   994 non-null    object \n",
            " 17  continent  284 non-null    object \n",
            " 18  country    651 non-null    object \n",
            "dtypes: float64(6), int64(5), object(8)\n",
            "memory usage: 148.6+ KB\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df.shape"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "AjxOCu41Fcxl",
        "outputId": "22875b20-c4c9-4c2f-e77a-f7e0d259d353"
      },
      "execution_count": 4,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "(1000, 19)"
            ]
          },
          "metadata": {},
          "execution_count": 4
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df['date_time'] = pd.to_datetime(df['date_time'], dayfirst=True)\n",
        "df.info()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "0bEku44TD14x",
        "outputId": "d1281099-862e-4889-b79b-3e851643bab4"
      },
      "execution_count": 5,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "<class 'pandas.core.frame.DataFrame'>\n",
            "RangeIndex: 1000 entries, 0 to 999\n",
            "Data columns (total 19 columns):\n",
            " #   Column     Non-Null Count  Dtype         \n",
            "---  ------     --------------  -----         \n",
            " 0   title      1000 non-null   object        \n",
            " 1   magnitude  1000 non-null   float64       \n",
            " 2   date_time  1000 non-null   datetime64[ns]\n",
            " 3   cdi        1000 non-null   int64         \n",
            " 4   mmi        1000 non-null   int64         \n",
            " 5   alert      449 non-null    object        \n",
            " 6   tsunami    1000 non-null   int64         \n",
            " 7   sig        1000 non-null   int64         \n",
            " 8   net        1000 non-null   object        \n",
            " 9   nst        1000 non-null   int64         \n",
            " 10  dmin       1000 non-null   float64       \n",
            " 11  gap        1000 non-null   float64       \n",
            " 12  magType    1000 non-null   object        \n",
            " 13  depth      1000 non-null   float64       \n",
            " 14  latitude   1000 non-null   float64       \n",
            " 15  longitude  1000 non-null   float64       \n",
            " 16  location   994 non-null    object        \n",
            " 17  continent  284 non-null    object        \n",
            " 18  country    651 non-null    object        \n",
            "dtypes: datetime64[ns](1), float64(6), int64(5), object(7)\n",
            "memory usage: 148.6+ KB\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df.duplicated().sum()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "GWZPLjYaEP4m",
        "outputId": "2ae12260-bc4c-4c8f-cc1e-cfdfc9555d71"
      },
      "execution_count": 6,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "0"
            ]
          },
          "metadata": {},
          "execution_count": 6
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df.describe()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 320
        },
        "id": "CbJBOzCnFG4V",
        "outputId": "dd5bfd5a-1794-4d07-e127-6d92b9be2a41"
      },
      "execution_count": 7,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "         magnitude          cdi         mmi      tsunami          sig  \\\n",
              "count  1000.000000  1000.000000  1000.00000  1000.000000  1000.000000   \n",
              "mean      6.940150     3.605000     6.02700     0.325000   847.915000   \n",
              "std       0.438148     3.328972     1.43399     0.468609   301.802632   \n",
              "min       6.500000     0.000000     1.00000     0.000000   650.000000   \n",
              "25%       6.600000     0.000000     5.00000     0.000000   691.000000   \n",
              "50%       6.800000     4.000000     6.00000     0.000000   744.000000   \n",
              "75%       7.100000     7.000000     7.00000     1.000000   874.250000   \n",
              "max       9.100000     9.000000    10.00000     1.000000  2910.000000   \n",
              "\n",
              "               nst         dmin          gap        depth     latitude  \\\n",
              "count  1000.000000  1000.000000  1000.000000  1000.000000  1000.000000   \n",
              "mean    193.918000     1.125174    20.926290    74.612541     4.315554   \n",
              "std     239.045858     2.073164    24.415895   130.812590    26.633320   \n",
              "min       0.000000     0.000000     0.000000     2.700000   -61.848400   \n",
              "25%       0.000000     0.000000     0.000000    16.000000   -13.518500   \n",
              "50%       0.000000     0.000000    18.000000    29.000000    -2.443500   \n",
              "75%     403.000000     1.549250    27.000000    55.000000    25.167250   \n",
              "max     934.000000    17.654000   239.000000   670.810000    71.631200   \n",
              "\n",
              "         longitude  \n",
              "count  1000.000000  \n",
              "mean     51.486576  \n",
              "std     117.478302  \n",
              "min    -179.968000  \n",
              "25%     -71.694450  \n",
              "50%     107.791000  \n",
              "75%     148.364750  \n",
              "max     179.662000  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-a2e3cc8b-6c05-44c3-8614-0f04c470c676\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>magnitude</th>\n",
              "      <th>cdi</th>\n",
              "      <th>mmi</th>\n",
              "      <th>tsunami</th>\n",
              "      <th>sig</th>\n",
              "      <th>nst</th>\n",
              "      <th>dmin</th>\n",
              "      <th>gap</th>\n",
              "      <th>depth</th>\n",
              "      <th>latitude</th>\n",
              "      <th>longitude</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>count</th>\n",
              "      <td>1000.000000</td>\n",
              "      <td>1000.000000</td>\n",
              "      <td>1000.00000</td>\n",
              "      <td>1000.000000</td>\n",
              "      <td>1000.000000</td>\n",
              "      <td>1000.000000</td>\n",
              "      <td>1000.000000</td>\n",
              "      <td>1000.000000</td>\n",
              "      <td>1000.000000</td>\n",
              "      <td>1000.000000</td>\n",
              "      <td>1000.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>mean</th>\n",
              "      <td>6.940150</td>\n",
              "      <td>3.605000</td>\n",
              "      <td>6.02700</td>\n",
              "      <td>0.325000</td>\n",
              "      <td>847.915000</td>\n",
              "      <td>193.918000</td>\n",
              "      <td>1.125174</td>\n",
              "      <td>20.926290</td>\n",
              "      <td>74.612541</td>\n",
              "      <td>4.315554</td>\n",
              "      <td>51.486576</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>std</th>\n",
              "      <td>0.438148</td>\n",
              "      <td>3.328972</td>\n",
              "      <td>1.43399</td>\n",
              "      <td>0.468609</td>\n",
              "      <td>301.802632</td>\n",
              "      <td>239.045858</td>\n",
              "      <td>2.073164</td>\n",
              "      <td>24.415895</td>\n",
              "      <td>130.812590</td>\n",
              "      <td>26.633320</td>\n",
              "      <td>117.478302</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>min</th>\n",
              "      <td>6.500000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>1.00000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>650.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>2.700000</td>\n",
              "      <td>-61.848400</td>\n",
              "      <td>-179.968000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>25%</th>\n",
              "      <td>6.600000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>5.00000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>691.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>16.000000</td>\n",
              "      <td>-13.518500</td>\n",
              "      <td>-71.694450</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>50%</th>\n",
              "      <td>6.800000</td>\n",
              "      <td>4.000000</td>\n",
              "      <td>6.00000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>744.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>18.000000</td>\n",
              "      <td>29.000000</td>\n",
              "      <td>-2.443500</td>\n",
              "      <td>107.791000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>75%</th>\n",
              "      <td>7.100000</td>\n",
              "      <td>7.000000</td>\n",
              "      <td>7.00000</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>874.250000</td>\n",
              "      <td>403.000000</td>\n",
              "      <td>1.549250</td>\n",
              "      <td>27.000000</td>\n",
              "      <td>55.000000</td>\n",
              "      <td>25.167250</td>\n",
              "      <td>148.364750</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>max</th>\n",
              "      <td>9.100000</td>\n",
              "      <td>9.000000</td>\n",
              "      <td>10.00000</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>2910.000000</td>\n",
              "      <td>934.000000</td>\n",
              "      <td>17.654000</td>\n",
              "      <td>239.000000</td>\n",
              "      <td>670.810000</td>\n",
              "      <td>71.631200</td>\n",
              "      <td>179.662000</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-a2e3cc8b-6c05-44c3-8614-0f04c470c676')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-a2e3cc8b-6c05-44c3-8614-0f04c470c676 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-a2e3cc8b-6c05-44c3-8614-0f04c470c676');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-13dbb933-d98e-48f6-b98d-634ff5b6a5ad\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-13dbb933-d98e-48f6-b98d-634ff5b6a5ad')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-13dbb933-d98e-48f6-b98d-634ff5b6a5ad button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "summary": "{\n  \"name\": \"df\",\n  \"rows\": 8,\n  \"fields\": [\n    {\n      \"column\": \"magnitude\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 351.366263495929,\n        \"min\": 0.43814797859986887,\n        \"max\": 1000.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          6.940150000000001,\n          6.8,\n          1000.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"cdi\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 352.2064948558393,\n        \"min\": 0.0,\n        \"max\": 1000.0,\n        \"num_unique_values\": 7,\n        \"samples\": [\n          1000.0,\n          3.605,\n          7.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"mmi\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 351.72390919211904,\n        \"min\": 1.0,\n        \"max\": 1000.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          6.027,\n          6.0,\n          1000.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"tsunami\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 353.4125366409159,\n        \"min\": 0.0,\n        \"max\": 1000.0,\n        \"num_unique_values\": 5,\n        \"samples\": [\n          0.325,\n          1.0,\n          0.46860921309188386\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"sig\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 798.0328048400769,\n        \"min\": 301.8026318699087,\n        \"max\": 2910.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          847.915,\n          744.0,\n          1000.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"nst\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 408.90527040162317,\n        \"min\": 0.0,\n        \"max\": 1000.0,\n        \"num_unique_values\": 6,\n        \"samples\": [\n          1000.0,\n          193.918,\n          934.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"dmin\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 352.4721877280402,\n        \"min\": 0.0,\n        \"max\": 1000.0,\n        \"num_unique_values\": 6,\n        \"samples\": [\n          1000.0,\n          1.1251744739999998,\n          17.654\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"gap\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 346.0623839317622,\n        \"min\": 0.0,\n        \"max\": 1000.0,\n        \"num_unique_values\": 7,\n        \"samples\": [\n          1000.0,\n          20.92629,\n          27.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"depth\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 375.55126709291517,\n        \"min\": 2.7,\n        \"max\": 1000.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          74.612541,\n          29.0,\n          1000.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"latitude\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 353.090514287824,\n        \"min\": -61.8484,\n        \"max\": 1000.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          4.3155544,\n          -2.4435000000000002,\n          1000.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"longitude\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 356.77589004789894,\n        \"min\": -179.968,\n        \"max\": 1000.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          51.486576,\n          107.791,\n          1000.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 7
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df.head()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 521
        },
        "id": "0_teFWNAGXJC",
        "outputId": "e4146430-a0c1-41e6-d3ea-0ecb0e4c3ab6"
      },
      "execution_count": 8,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "                                      title  magnitude           date_time  \\\n",
              "0          M 6.5 - 42 km W of Sola, Vanuatu        6.5 2023-08-16 12:47:00   \n",
              "1  M 6.5 - 43 km S of Intipucá, El Salvador        6.5 2023-07-19 00:22:00   \n",
              "2  M 6.6 - 25 km ESE of Loncopué, Argentina        6.6 2023-07-17 03:05:00   \n",
              "3     M 7.2 - 98 km S of Sand Point, Alaska        7.2 2023-07-16 06:48:00   \n",
              "4                  M 7.3 - Alaska Peninsula        7.3 2023-07-16 06:48:00   \n",
              "\n",
              "   cdi  mmi   alert  tsunami  sig net  nst      dmin    gap magType    depth  \\\n",
              "0    7    4   green        0  657  us  114  7.177000   25.0     mww  192.955   \n",
              "1    8    6  yellow        0  775  us   92  0.679000   40.0     mww   69.727   \n",
              "2    7    5   green        0  899  us   70  1.634000   28.0     mww  171.371   \n",
              "3    6    6   green        1  860  us  173  0.907000   36.0     mww   32.571   \n",
              "4    0    5     NaN        1  820  at   79  0.879451  172.8      Mi   21.000   \n",
              "\n",
              "   latitude  longitude               location      continent    country  \n",
              "0  -13.8814   167.1580          Sola, Vanuatu            NaN    Vanuatu  \n",
              "1   12.8140   -88.1265  Intipucá, El Salvador            NaN        NaN  \n",
              "2  -38.1911   -70.3731    Loncopué, Argentina  South America  Argentina  \n",
              "3   54.3844  -160.6990     Sand Point, Alaska            NaN        NaN  \n",
              "4   54.4900  -160.7960       Alaska Peninsula            NaN        NaN  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-f483b594-15bd-468b-b353-27a46d2b1636\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>title</th>\n",
              "      <th>magnitude</th>\n",
              "      <th>date_time</th>\n",
              "      <th>cdi</th>\n",
              "      <th>mmi</th>\n",
              "      <th>alert</th>\n",
              "      <th>tsunami</th>\n",
              "      <th>sig</th>\n",
              "      <th>net</th>\n",
              "      <th>nst</th>\n",
              "      <th>dmin</th>\n",
              "      <th>gap</th>\n",
              "      <th>magType</th>\n",
              "      <th>depth</th>\n",
              "      <th>latitude</th>\n",
              "      <th>longitude</th>\n",
              "      <th>location</th>\n",
              "      <th>continent</th>\n",
              "      <th>country</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>M 6.5 - 42 km W of Sola, Vanuatu</td>\n",
              "      <td>6.5</td>\n",
              "      <td>2023-08-16 12:47:00</td>\n",
              "      <td>7</td>\n",
              "      <td>4</td>\n",
              "      <td>green</td>\n",
              "      <td>0</td>\n",
              "      <td>657</td>\n",
              "      <td>us</td>\n",
              "      <td>114</td>\n",
              "      <td>7.177000</td>\n",
              "      <td>25.0</td>\n",
              "      <td>mww</td>\n",
              "      <td>192.955</td>\n",
              "      <td>-13.8814</td>\n",
              "      <td>167.1580</td>\n",
              "      <td>Sola, Vanuatu</td>\n",
              "      <td>NaN</td>\n",
              "      <td>Vanuatu</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>M 6.5 - 43 km S of Intipucá, El Salvador</td>\n",
              "      <td>6.5</td>\n",
              "      <td>2023-07-19 00:22:00</td>\n",
              "      <td>8</td>\n",
              "      <td>6</td>\n",
              "      <td>yellow</td>\n",
              "      <td>0</td>\n",
              "      <td>775</td>\n",
              "      <td>us</td>\n",
              "      <td>92</td>\n",
              "      <td>0.679000</td>\n",
              "      <td>40.0</td>\n",
              "      <td>mww</td>\n",
              "      <td>69.727</td>\n",
              "      <td>12.8140</td>\n",
              "      <td>-88.1265</td>\n",
              "      <td>Intipucá, El Salvador</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>M 6.6 - 25 km ESE of Loncopué, Argentina</td>\n",
              "      <td>6.6</td>\n",
              "      <td>2023-07-17 03:05:00</td>\n",
              "      <td>7</td>\n",
              "      <td>5</td>\n",
              "      <td>green</td>\n",
              "      <td>0</td>\n",
              "      <td>899</td>\n",
              "      <td>us</td>\n",
              "      <td>70</td>\n",
              "      <td>1.634000</td>\n",
              "      <td>28.0</td>\n",
              "      <td>mww</td>\n",
              "      <td>171.371</td>\n",
              "      <td>-38.1911</td>\n",
              "      <td>-70.3731</td>\n",
              "      <td>Loncopué, Argentina</td>\n",
              "      <td>South America</td>\n",
              "      <td>Argentina</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>M 7.2 - 98 km S of Sand Point, Alaska</td>\n",
              "      <td>7.2</td>\n",
              "      <td>2023-07-16 06:48:00</td>\n",
              "      <td>6</td>\n",
              "      <td>6</td>\n",
              "      <td>green</td>\n",
              "      <td>1</td>\n",
              "      <td>860</td>\n",
              "      <td>us</td>\n",
              "      <td>173</td>\n",
              "      <td>0.907000</td>\n",
              "      <td>36.0</td>\n",
              "      <td>mww</td>\n",
              "      <td>32.571</td>\n",
              "      <td>54.3844</td>\n",
              "      <td>-160.6990</td>\n",
              "      <td>Sand Point, Alaska</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>M 7.3 - Alaska Peninsula</td>\n",
              "      <td>7.3</td>\n",
              "      <td>2023-07-16 06:48:00</td>\n",
              "      <td>0</td>\n",
              "      <td>5</td>\n",
              "      <td>NaN</td>\n",
              "      <td>1</td>\n",
              "      <td>820</td>\n",
              "      <td>at</td>\n",
              "      <td>79</td>\n",
              "      <td>0.879451</td>\n",
              "      <td>172.8</td>\n",
              "      <td>Mi</td>\n",
              "      <td>21.000</td>\n",
              "      <td>54.4900</td>\n",
              "      <td>-160.7960</td>\n",
              "      <td>Alaska Peninsula</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-f483b594-15bd-468b-b353-27a46d2b1636')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-f483b594-15bd-468b-b353-27a46d2b1636 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-f483b594-15bd-468b-b353-27a46d2b1636');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-658c8e60-0326-4971-a92e-b4a79af5e76a\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-658c8e60-0326-4971-a92e-b4a79af5e76a')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-658c8e60-0326-4971-a92e-b4a79af5e76a button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "df",
              "summary": "{\n  \"name\": \"df\",\n  \"rows\": 1000,\n  \"fields\": [\n    {\n      \"column\": \"title\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 984,\n        \"samples\": [\n          \"M 7.8 - 148 km WSW of Sungai Penuh, Indonesia\",\n          \"M 7.3 - 126 km S of Puerto El Triunfo, El Salvador\",\n          \"M 8.2 - 134 km SSW of Kushiro, Japan\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"magnitude\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.43814797859986887,\n        \"min\": 6.5,\n        \"max\": 9.1,\n        \"num_unique_values\": 25,\n        \"samples\": [\n          6.7,\n          8.0,\n          6.5\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"date_time\",\n      \"properties\": {\n        \"dtype\": \"date\",\n        \"min\": \"1995-05-05 03:53:00\",\n        \"max\": \"2023-08-16 12:47:00\",\n        \"num_unique_values\": 990,\n        \"samples\": [\n          \"2017-12-15 16:47:00\",\n          \"2015-05-05 01:44:00\",\n          \"2011-03-11 08:19:00\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"cdi\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 3,\n        \"min\": 0,\n        \"max\": 9,\n        \"num_unique_values\": 10,\n        \"samples\": [\n          1,\n          8,\n          4\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"mmi\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1,\n        \"min\": 1,\n        \"max\": 10,\n        \"num_unique_values\": 10,\n        \"samples\": [\n          1,\n          6,\n          3\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"alert\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 4,\n        \"samples\": [\n          \"yellow\",\n          \"red\",\n          \"green\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"tsunami\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 0,\n        \"max\": 1,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          1,\n          0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"sig\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 301,\n        \"min\": 650,\n        \"max\": 2910,\n        \"num_unique_values\": 356,\n        \"samples\": [\n          951,\n          1043\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"net\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 11,\n        \"samples\": [\n          \"ci\",\n          \"us\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"nst\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 239,\n        \"min\": 0,\n        \"max\": 934,\n        \"num_unique_values\": 345,\n        \"samples\": [\n          481,\n          611\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"dmin\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 2.073164204113048,\n        \"min\": 0.0,\n        \"max\": 17.654,\n        \"num_unique_values\": 402,\n        \"samples\": [\n          0.281,\n          1.166\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"gap\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 24.41589475838952,\n        \"min\": 0.0,\n        \"max\": 239.0,\n        \"num_unique_values\": 259,\n        \"samples\": [\n          74.0,\n          19.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"magType\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 9,\n        \"samples\": [\n          \"mb\",\n          \"Mi\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"depth\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 130.81258992740658,\n        \"min\": 2.7,\n        \"max\": 670.81,\n        \"num_unique_values\": 401,\n        \"samples\": [\n          28.9,\n          7.8\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"latitude\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 26.63332016474323,\n        \"min\": -61.8484,\n        \"max\": 71.6312,\n        \"num_unique_values\": 996,\n        \"samples\": [\n          -12.037,\n          28.826\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"longitude\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 117.47830249586582,\n        \"min\": -179.968,\n        \"max\": 179.662,\n        \"num_unique_values\": 992,\n        \"samples\": [\n          142.754,\n          163.696\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"location\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 502,\n        \"samples\": [\n          \"Hojancha, Costa Rica\",\n          \"Ust\\u2019-Kamchatsk Staryy, Russia\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"continent\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 6,\n        \"samples\": [\n          \"South America\",\n          \"Asia\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"country\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 56,\n        \"samples\": [\n          \"Vanuatu\",\n          \"Papua New Guinea\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 8
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#feature engineering\n",
        "new_dataFrame = df\n",
        "new_dataFrame = new_dataFrame.drop(['net','magType','date_time','title','alert','location','country','continent'],axis=1, inplace=True)"
      ],
      "metadata": {
        "id": "XXCc4gUrGdPo"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "new_dataFrame.head()"
      ],
      "metadata": {
        "id": "p0JxkD3jH9mW",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 206
        },
        "outputId": "50e687fb-84a8-47a3-9779-21484b06b302"
      },
      "execution_count": 12,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "   magnitude  cdi  mmi  tsunami  sig  nst      dmin    gap    depth  latitude  \\\n",
              "0        6.5    7    4        0  657  114  7.177000   25.0  192.955  -13.8814   \n",
              "1        6.5    8    6        0  775   92  0.679000   40.0   69.727   12.8140   \n",
              "2        6.6    7    5        0  899   70  1.634000   28.0  171.371  -38.1911   \n",
              "3        7.2    6    6        1  860  173  0.907000   36.0   32.571   54.3844   \n",
              "4        7.3    0    5        1  820   79  0.879451  172.8   21.000   54.4900   \n",
              "\n",
              "   longitude  \n",
              "0   167.1580  \n",
              "1   -88.1265  \n",
              "2   -70.3731  \n",
              "3  -160.6990  \n",
              "4  -160.7960  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-6ef2d551-c61e-416b-8174-0c7fc7738d80\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>magnitude</th>\n",
              "      <th>cdi</th>\n",
              "      <th>mmi</th>\n",
              "      <th>tsunami</th>\n",
              "      <th>sig</th>\n",
              "      <th>nst</th>\n",
              "      <th>dmin</th>\n",
              "      <th>gap</th>\n",
              "      <th>depth</th>\n",
              "      <th>latitude</th>\n",
              "      <th>longitude</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>6.5</td>\n",
              "      <td>7</td>\n",
              "      <td>4</td>\n",
              "      <td>0</td>\n",
              "      <td>657</td>\n",
              "      <td>114</td>\n",
              "      <td>7.177000</td>\n",
              "      <td>25.0</td>\n",
              "      <td>192.955</td>\n",
              "      <td>-13.8814</td>\n",
              "      <td>167.1580</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>6.5</td>\n",
              "      <td>8</td>\n",
              "      <td>6</td>\n",
              "      <td>0</td>\n",
              "      <td>775</td>\n",
              "      <td>92</td>\n",
              "      <td>0.679000</td>\n",
              "      <td>40.0</td>\n",
              "      <td>69.727</td>\n",
              "      <td>12.8140</td>\n",
              "      <td>-88.1265</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>6.6</td>\n",
              "      <td>7</td>\n",
              "      <td>5</td>\n",
              "      <td>0</td>\n",
              "      <td>899</td>\n",
              "      <td>70</td>\n",
              "      <td>1.634000</td>\n",
              "      <td>28.0</td>\n",
              "      <td>171.371</td>\n",
              "      <td>-38.1911</td>\n",
              "      <td>-70.3731</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>7.2</td>\n",
              "      <td>6</td>\n",
              "      <td>6</td>\n",
              "      <td>1</td>\n",
              "      <td>860</td>\n",
              "      <td>173</td>\n",
              "      <td>0.907000</td>\n",
              "      <td>36.0</td>\n",
              "      <td>32.571</td>\n",
              "      <td>54.3844</td>\n",
              "      <td>-160.6990</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>7.3</td>\n",
              "      <td>0</td>\n",
              "      <td>5</td>\n",
              "      <td>1</td>\n",
              "      <td>820</td>\n",
              "      <td>79</td>\n",
              "      <td>0.879451</td>\n",
              "      <td>172.8</td>\n",
              "      <td>21.000</td>\n",
              "      <td>54.4900</td>\n",
              "      <td>-160.7960</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-6ef2d551-c61e-416b-8174-0c7fc7738d80')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-6ef2d551-c61e-416b-8174-0c7fc7738d80 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-6ef2d551-c61e-416b-8174-0c7fc7738d80');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-b3f6ab9d-ebe1-42ee-a701-b7f179267178\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-b3f6ab9d-ebe1-42ee-a701-b7f179267178')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-b3f6ab9d-ebe1-42ee-a701-b7f179267178 button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "new_dataFrame",
              "summary": "{\n  \"name\": \"new_dataFrame\",\n  \"rows\": 1000,\n  \"fields\": [\n    {\n      \"column\": \"magnitude\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.43814797859986887,\n        \"min\": 6.5,\n        \"max\": 9.1,\n        \"num_unique_values\": 25,\n        \"samples\": [\n          6.7,\n          8.0,\n          6.5\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"cdi\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 3,\n        \"min\": 0,\n        \"max\": 9,\n        \"num_unique_values\": 10,\n        \"samples\": [\n          1,\n          8,\n          4\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"mmi\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1,\n        \"min\": 1,\n        \"max\": 10,\n        \"num_unique_values\": 10,\n        \"samples\": [\n          1,\n          6,\n          3\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"tsunami\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 0,\n        \"max\": 1,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          1,\n          0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"sig\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 301,\n        \"min\": 650,\n        \"max\": 2910,\n        \"num_unique_values\": 356,\n        \"samples\": [\n          951,\n          1043\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"nst\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 239,\n        \"min\": 0,\n        \"max\": 934,\n        \"num_unique_values\": 345,\n        \"samples\": [\n          481,\n          611\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"dmin\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 2.073164204113048,\n        \"min\": 0.0,\n        \"max\": 17.654,\n        \"num_unique_values\": 402,\n        \"samples\": [\n          0.281,\n          1.166\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"gap\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 24.41589475838952,\n        \"min\": 0.0,\n        \"max\": 239.0,\n        \"num_unique_values\": 259,\n        \"samples\": [\n          74.0,\n          19.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"depth\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 130.81258992740658,\n        \"min\": 2.7,\n        \"max\": 670.81,\n        \"num_unique_values\": 401,\n        \"samples\": [\n          28.9,\n          7.8\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"latitude\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 26.63332016474323,\n        \"min\": -61.8484,\n        \"max\": 71.6312,\n        \"num_unique_values\": 996,\n        \"samples\": [\n          -12.037,\n          28.826\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"longitude\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 117.47830249586582,\n        \"min\": -179.968,\n        \"max\": 179.662,\n        \"num_unique_values\": 992,\n        \"samples\": [\n          142.754,\n          163.696\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 12
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "d=new_dataFrame.corr()\n",
        "d=d[(d>0.3) | (d<-0.3)]\n",
        "plt.figure(figsize=(15,8))\n",
        "sns.heatmap(d,annot=True)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 630
        },
        "id": "tzPJ5sL2JRUP",
        "outputId": "d4222912-f89d-49ae-ece2-9d0ed1bbd3bf"
      },
      "execution_count": 13,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<Axes: >"
            ]
          },
          "metadata": {},
          "execution_count": 13
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1500x800 with 2 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "from sklearn.linear_model import LogisticRegression\n",
        "from sklearn.tree import DecisionTreeClassifier\n",
        "from sklearn.ensemble import RandomForestClassifier\n",
        "from sklearn.model_selection import train_test_split,GridSearchCV\n",
        "from sklearn.metrics import accuracy_score, classification_report, confusion_matrix\n",
        "from imblearn.over_sampling import RandomOverSampler,SMOTE\n",
        "from imblearn.under_sampling import RandomUnderSampler\n",
        "from sklearn.preprocessing import StandardScaler\n",
        "import xgboost as xgb\n",
        "from sklearn.naive_bayes import GaussianNB"
      ],
      "metadata": {
        "id": "IwoC1hK9L2rv"
      },
      "execution_count": 14,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "sc = StandardScaler()\n",
        "\n",
        "x=new_dataFrame.drop('tsunami',axis=1)\n",
        "y=new_dataFrame['tsunami']\n",
        "scale_x=sc.fit_transform(x)\n",
        "x=pd.DataFrame(scale_x,columns=x.columns)\n",
        "x_train,x_test,y_train,y_test=train_test_split(x,y,test_size=0.1)\n",
        "x_train1,x_test1,y_train1,y_test1=train_test_split(x,y,test_size=0.2)"
      ],
      "metadata": {
        "id": "VmpP518NL4Hf"
      },
      "execution_count": 15,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "sns.countplot(x=y, data=new_dataFrame)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 468
        },
        "id": "tmwcEt5EMGSk",
        "outputId": "9712a5ed-1b2f-4db5-ff3b-b20d8d7c3e82"
      },
      "execution_count": 16,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<Axes: xlabel='tsunami', ylabel='count'>"
            ]
          },
          "metadata": {},
          "execution_count": 16
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#undersample so that the balance in the dataset can be obtained\n",
        "from collections import Counter\n",
        "undersample = RandomUnderSampler(sampling_strategy=1)\n",
        "# transform the dataset\n",
        "print(Counter(y_train))\n",
        "x_train, y_train = undersample.fit_resample(x_train, y_train)\n",
        "print(Counter(y_train))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "KIq2m_UQMUbV",
        "outputId": "0266e208-0894-47e1-8e20-aa472560ea51"
      },
      "execution_count": 17,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Counter({0: 609, 1: 291})\n",
            "Counter({0: 291, 1: 291})\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#oversample the data so that balance is maintained\n",
        "sm=SMOTE()\n",
        "print(Counter(y_train1))\n",
        "x_train1,y_train1=sm.fit_resample(x_train1,y_train1)\n",
        "print(Counter(y_train1))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "WidzSUBnQW4_",
        "outputId": "61964935-f061-4c2d-9836-be51eb3cedf6"
      },
      "execution_count": 18,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Counter({0: 543, 1: 257})\n",
            "Counter({0: 543, 1: 543})\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "models = {\n",
        "    \"Logistic regression\":LogisticRegression(),\n",
        "    \"Decision Tree \":DecisionTreeClassifier(),\n",
        "    \"RandomForest\":RandomForestClassifier(),\n",
        "    \"xgb\":xgb.XGBClassifier(),\n",
        "    \"Naive Bayes\": GaussianNB(),\n",
        "}"
      ],
      "metadata": {
        "id": "Dxcd9kGrR7IP"
      },
      "execution_count": 19,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "from sklearn import svm, metrics\n",
        "from sklearn.model_selection import train_test_split, KFold, cross_val_score\n",
        "kfold = KFold(n_splits=10, random_state=7, shuffle=True)\n",
        "\n",
        "for name,model in models.items():\n",
        "    model.fit(x_train,y_train)\n",
        "    p = model.predict(x_test)\n",
        "    print(\"Model: \" , name)\n",
        "    print(\"------------------------------\")\n",
        "    print(classification_report(y_test,p))\n",
        "    trainResult = cross_val_score(model, x_train, y_train, scoring='accuracy', cv=kfold)\n",
        "    print(\"Training accuracy:\",trainResult.mean())\n",
        "    testResult = metrics.accuracy_score(y_test, p)\n",
        "    print(\"Testing accuracy:\",testResult.mean())\n",
        "    print(\"**********************************************************\")"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "tPDsThMLSIND",
        "outputId": "52b387cc-2666-4e68-bdc7-bda0ab7d19e2"
      },
      "execution_count": 23,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Model:  Logistic regression\n",
            "------------------------------\n",
            "              precision    recall  f1-score   support\n",
            "\n",
            "           0       0.96      0.80      0.88        66\n",
            "           1       0.71      0.94      0.81        34\n",
            "\n",
            "    accuracy                           0.85       100\n",
            "   macro avg       0.84      0.87      0.84       100\n",
            "weighted avg       0.88      0.85      0.85       100\n",
            "\n",
            "Training accuracy: 0.8537989479836353\n",
            "Testing accuracy: 0.85\n",
            "**********************************************************\n",
            "Model:  Decision Tree \n",
            "------------------------------\n",
            "              precision    recall  f1-score   support\n",
            "\n",
            "           0       0.90      0.82      0.86        66\n",
            "           1       0.70      0.82      0.76        34\n",
            "\n",
            "    accuracy                           0.82       100\n",
            "   macro avg       0.80      0.82      0.81       100\n",
            "weighted avg       0.83      0.82      0.82       100\n",
            "\n",
            "Training accuracy: 0.864260666277031\n",
            "Testing accuracy: 0.82\n",
            "**********************************************************\n",
            "Model:  RandomForest\n",
            "------------------------------\n",
            "              precision    recall  f1-score   support\n",
            "\n",
            "           0       0.95      0.85      0.90        66\n",
            "           1       0.76      0.91      0.83        34\n",
            "\n",
            "    accuracy                           0.87       100\n",
            "   macro avg       0.85      0.88      0.86       100\n",
            "weighted avg       0.88      0.87      0.87       100\n",
            "\n",
            "Training accuracy: 0.9020163646990064\n",
            "Testing accuracy: 0.87\n",
            "**********************************************************\n",
            "Model:  xgb\n",
            "------------------------------\n",
            "              precision    recall  f1-score   support\n",
            "\n",
            "           0       0.95      0.89      0.92        66\n",
            "           1       0.82      0.91      0.86        34\n",
            "\n",
            "    accuracy                           0.90       100\n",
            "   macro avg       0.88      0.90      0.89       100\n",
            "weighted avg       0.91      0.90      0.90       100\n",
            "\n",
            "Training accuracy: 0.8935125657510227\n",
            "Testing accuracy: 0.9\n",
            "**********************************************************\n",
            "Model:  Naive Bayes\n",
            "------------------------------\n",
            "              precision    recall  f1-score   support\n",
            "\n",
            "           0       0.95      0.85      0.90        66\n",
            "           1       0.76      0.91      0.83        34\n",
            "\n",
            "    accuracy                           0.87       100\n",
            "   macro avg       0.85      0.88      0.86       100\n",
            "weighted avg       0.88      0.87      0.87       100\n",
            "\n",
            "Training accuracy: 0.8161309175920515\n",
            "Testing accuracy: 0.87\n",
            "**********************************************************\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "for name,model in models.items():\n",
        "    model.fit(x_train1,y_train1)\n",
        "    p1 = model.predict(x_test1)\n",
        "    print(\"Model: \" , name)\n",
        "    print(classification_report(y_test1,p1))\n",
        "    trainResult = cross_val_score(model, x_train1, y_train1, scoring='accuracy', cv=kfold)\n",
        "    print(\"Training accuracy:\",trainResult.mean())\n",
        "    testResult = metrics.accuracy_score(y_test1, p1)\n",
        "    print(\"Testing accuracy:\",testResult.mean())\n",
        "    print(\"**********************************************************\")"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "HhbL0yveTNoi",
        "outputId": "6145dafe-3222-4e50-920b-d871b453c6ec"
      },
      "execution_count": 25,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Model:  Logistic regression\n",
            "              precision    recall  f1-score   support\n",
            "\n",
            "           0       0.94      0.84      0.89       132\n",
            "           1       0.74      0.90      0.81        68\n",
            "\n",
            "    accuracy                           0.86       200\n",
            "   macro avg       0.84      0.87      0.85       200\n",
            "weighted avg       0.87      0.86      0.86       200\n",
            "\n",
            "Training accuracy: 0.8462283384301733\n",
            "Testing accuracy: 0.86\n",
            "**********************************************************\n",
            "Model:  Decision Tree \n",
            "              precision    recall  f1-score   support\n",
            "\n",
            "           0       0.91      0.88      0.89       132\n",
            "           1       0.78      0.82      0.80        68\n",
            "\n",
            "    accuracy                           0.86       200\n",
            "   macro avg       0.84      0.85      0.85       200\n",
            "weighted avg       0.86      0.86      0.86       200\n",
            "\n",
            "Training accuracy: 0.8978168535507984\n",
            "Testing accuracy: 0.86\n",
            "**********************************************************\n",
            "Model:  RandomForest\n",
            "              precision    recall  f1-score   support\n",
            "\n",
            "           0       0.94      0.92      0.93       132\n",
            "           1       0.85      0.88      0.86        68\n",
            "\n",
            "    accuracy                           0.91       200\n",
            "   macro avg       0.89      0.90      0.90       200\n",
            "weighted avg       0.91      0.91      0.91       200\n",
            "\n",
            "Training accuracy: 0.9309887869520896\n",
            "Testing accuracy: 0.905\n",
            "**********************************************************\n",
            "Model:  xgb\n",
            "              precision    recall  f1-score   support\n",
            "\n",
            "           0       0.92      0.92      0.92       132\n",
            "           1       0.84      0.85      0.85        68\n",
            "\n",
            "    accuracy                           0.90       200\n",
            "   macro avg       0.88      0.88      0.88       200\n",
            "weighted avg       0.90      0.90      0.90       200\n",
            "\n",
            "Training accuracy: 0.9337495752633368\n",
            "Testing accuracy: 0.895\n",
            "**********************************************************\n",
            "Model:  Naive Bayes\n",
            "              precision    recall  f1-score   support\n",
            "\n",
            "           0       0.93      0.82      0.87       132\n",
            "           1       0.71      0.88      0.79        68\n",
            "\n",
            "    accuracy                           0.84       200\n",
            "   macro avg       0.82      0.85      0.83       200\n",
            "weighted avg       0.86      0.84      0.84       200\n",
            "\n",
            "Training accuracy: 0.816853550798505\n",
            "Testing accuracy: 0.84\n",
            "**********************************************************\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#random forest performs consistenly in both scenarios. So this can be considered."
      ],
      "metadata": {
        "id": "oxxOrMNTdADp"
      },
      "execution_count": 26,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# Without SMOTE\n",
        "model = xgb.XGBClassifier()\n",
        "model.fit(x_train,y_train)\n",
        "p = model.predict(x_test)\n",
        "# Confusion matrix heatmap\n",
        "plt.figure(figsize=(6, 5))\n",
        "sns.heatmap(confusion_matrix(y_test, p), annot=True, fmt='d')\n",
        "plt.title('Confusion Matrix (without SMOTE) for RandomForestClassifier')\n",
        "plt.show()\n",
        "\n",
        "# With SMOTE\n",
        "model.fit(x_train1,y_train1)\n",
        "p1 = model.predict(x_test1)\n",
        "# Confusion matrix heatmap\n",
        "plt.figure(figsize=(6, 5))\n",
        "sns.heatmap(confusion_matrix(y_test1, p1), annot=True, fmt='d')\n",
        "plt.title('Confusion Matrix (with SMOTE) for RandomForestClassifier')\n",
        "plt.show()\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 919
        },
        "id": "ZhO6tlVHhrDD",
        "outputId": "6e651bbd-0708-48a0-ad3e-097c02787b75"
      },
      "execution_count": 27,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 600x500 with 2 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 600x500 with 2 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    }
  ]
}